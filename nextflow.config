// Singularity params
singularity.enabled    = true
singularity.autoMounts = true
// You can change this to a directory to cache your singularity containers

// Whether to remove working dir files after successful execution
cleanup = false

// Add default github branch
manifest.defaultBranch = 'main'

// Global default params
params {
  // input directory
	indir = "null"
	
	// output directory
	outdir = "null"
    
    // Paired end sequencing
    paired = false

    // ACAST.sc parameters (CNA calling parameters)
    min_ploidy = 1.5
    max_ploidy = 5
    min_purity = 1 // 1 or single-cell data
    max_purity = 1 // 1 for single-cell data
    sex = "female"

    // Segmentation
    multipcf = true // Only use this when the fastq files (cells) are from the same patient 'true' or 'false'
    
    // The following parameters can be lists of values, in which case the pipeline will be run for each combination
    binsize = [500000, 250000] // Binsize used for counting reads and subsequent segmentation
    segmentation_alpha = [0.01, 0.05] // Segmentation parameters to use in the case of CBS
    multipcf_penalty = [5, 10, 20, 40] // Segmentation parameters to use in the case of multipcf 
    
     
    // Reference genome options
    genome = null
    igenomes_base = "s3://ngi-igenomes/igenomes/"
    //igenomes_base = "/mnt/AchTeraD/Documents/igenomes/"
    igenomes_ignore = false
 
	validationSkipDuplicateCheck = "true"
    validationS3PathCheck = "true"
    
    // Resource options
    // Defaults only, expected to be overwritten
    max_memory = "8.GB"
    max_cpus = 1
    max_time = "12.h"	
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Profiles
profiles {
     test { includeConfig 'conf/test.config' }
     ht_hpc { includeConfig 'conf/ht_hpc.config' }
     uppmax { includeConfig 'conf/uppmax.config' }
     sirius { includeConfig 'conf/sirius.config' }
     lhpc { includeConfig 'conf/lhpc.config' }
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}