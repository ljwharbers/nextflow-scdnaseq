// Nextflow params
nextflow.enable.dsl=2

// Singularity params
singularity.enabled    = true
singularity.autoMounts = true
// You can change this to a directory to cache your singularity containers

// Global default params
params {
  // input directory
	indir = "null"
	
	// output directory
	outdir = "null"
    
    // Paired end sequencing
    paired = false

    // ACAST.sc parameters (CNA calling parameters)
    multipcf = 'TRUE' // Only use this when the fastq files (cells) are from the same patient 'TRUE' or 'FALSE'
    binsize = [500000, 250000] // Binsize used for counting reads and subsequent segmentation
    segmentation_alpha = 0.01 // Segmentation parameter used in the case of CBS (multipcf = false)
    penalty = 20 // Segmentation parameter used in the case of multipcf
    chroms = ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 
              'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 
              'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 
              'chr19', 'chr20', 'chr21', 'chr22', 'chrX'] // Chromosomes to be used for segmentation
    sex = "female"
    
    // Reference genome options
    genome = null
    igenomes_base = "s3://ngi-igenomes/igenomes/"
    //igenomes_base = "/mnt/AchTeraD/Documents/igenomes/"
    igenomes_ignore = false
 
	validationSkipDuplicateCheck = "true"
    validationS3PathCheck = "true"
    
    // Resource options
    // Defaults only, expected to be overwritten
    max_memory = "16.GB"
    max_cpus = 10
    max_time = "24.h"	
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Profiles
profiles {
     test { includeConfig 'conf/test.config' }
     ht_hpc { includeConfig 'conf/ht_hpc.config' }
     uppmax { includeConfig 'conf/uppmax.config' }
     sirius { includeConfig 'conf/sirius.config' }
     lhpc { includeConfig 'conf/lhpc.config' }
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}